(()=>{"use strict";const e=require("http"),t=require("dotenv"),n=require("uuid"),s=(Object.freeze({contentTypeJson:{"Content-Type":"application/json"}}),Object.freeze({invalidPersonData:{code:400,message:"Incorrect person data"},invalidId:{code:400,message:"PersonId not valid"},notFound:{code:404,message:"Person with this id not found"},server:{code:500,message:"Server error, please try later"},noRoute:{code:404,message:"Route or method not found"},db:{code:500,message:"Database error, please try later"}}));class r extends Error{constructor(e){super(),this.responseCode=e.code,this.message=e.message}}const o=e=>{const t=Array.isArray(e.hobbies)&&e.hobbies.every((e=>"string"==typeof e));if("string"!=typeof e.name||"number"!=typeof e.age||!t)throw new r(s.invalidPersonData)},a=Object.freeze([{id:"1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed",name:"Leanne Graham",age:17,hobbies:["football","tennis"]},{id:"109156be-c4fb-41ea-b1b4-efe1671c5836",name:"Ervin Howell",age:25,hobbies:["dogs","walking","coffee"]},{id:"6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b",name:"Clementine Bauch",age:34,hobbies:[]}]),i=(e,t,n)=>{e.writeHead(t,{"Content-Type":"application/json"}),n&&e.write(JSON.stringify(n)),e.end()},d=async e=>new Promise(((t,n)=>{try{let n="";e.on("data",(e=>{n+=e.toString()})),e.on("end",(()=>t(JSON.parse(n))))}catch(e){n(e)}}));t.config();const c=process.env.PORT||3e3,h=e.createServer(),b=new class{constructor(e=[]){this.data=e}getAllItems(){return this.data}getItem(e){return this.data.find((t=>t.id===e))}addItem(e){this.data=[...this.data,e]}removeItem(e){this.data=this.data.filter((t=>t.id!==e))}}(a),m=new class{constructor(e){this.db=e}async getPersons(){return new Promise((e=>{e(this.db.getAllItems())}))}async getPerson(e){return new Promise(((t,o)=>{(e=>{if(!(0,n.validate)(e)||4!==(0,n.version)(e))throw new r(s.invalidId)})(e);const a=this.db.getItem(e);a?t(a):o(new r(s.notFound))}))}async addPerson(e){return new Promise((t=>{o(e),t({...e,id:(0,n.v4)()})})).then((e=>this.addToDBAndVerify(e)))}async updatePerson(e){return this.getPerson(e.id).then((()=>(o(e),this.db.removeItem(e.id),e))).then((e=>this.addToDBAndVerify(e)))}async removePerson(e){return this.getPerson(e).then((()=>{this.db.removeItem(e)}))}addToDBAndVerify(e){this.db.addItem(e);const t=this.db.getItem(e.id);if(JSON.stringify(e)===JSON.stringify(t))return t;throw new r(s.db)}}(b);h.on("request",(async(e,t)=>{try{const n=e.url.split("/").filter((e=>e.length>0));if("person"===n[0]){if(1===n.length){if("GET"===e.method){const e=await m.getPersons();return void i(t,200,e)}if("POST"===e.method){const n=await d(e),s=await m.addPerson(n);return void i(t,201,s)}}if(2===n.length){const s=n[1];if("GET"===e.method){const e=await m.getPerson(s);return void i(t,200,e)}if("PUT"===e.method){const n=await d(e),s=await m.updatePerson(n);return void i(t,200,s)}if("DELETE"===e.method)return await m.removePerson(s),void i(t,204)}}throw new r(s.noRoute)}catch(e){const n=e instanceof r?e:new r(s.server);i(t,n.responseCode,{message:n.message})}})),h.listen(c,(()=>{console.log(`Server running at port ${c}`)}))})();